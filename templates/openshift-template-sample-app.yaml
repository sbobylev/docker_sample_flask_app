apiVersion: v1
items:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: docker_sample_flask_app
    spec:
      dockerImageRepository: "docker.io/sbobylev/docker_sample_flask_app"
      tags:
      - from:
          kind: DockerImage
          name: sbobylev/docker_sample_flask_app
        name: latest
        importPolicy:
          scheduled: true
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: sample-app
      name: sample-app
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        name: sample-app
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        name: sample-app
        deploymentconfig: sample-app
      name: sample-app
    spec:
      replicas: 1
      selector:
        name: sample-app
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            name: sample-app
        spec:
          containers:
          - image: docker_sample_flask_app
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 90
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            name: sample-app
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            name: sample-app
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - sample-app
          from:
            kind: ImageStreamTag
            name: docker_sample_flask_app:latest
  - apiVersion: v1
    kind: Route
    metadata:
      name: sample-app
    spec:
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: sample-app
        weight: 100
      wildcardPolicy: None
kind: List
metadata: {}
